#
# File used to perform the diffie hellman 
# handshake between two entities
#
# Also uses the expo.py file to perform the 
# modular exponnenation of large numbers
#

from expo import expo
import socket
import sys

HOST = 'localhost'
PORT = 8000

MESSAGE_SIZE = 1024

def main():
    print('ENTER ALL VALUES AS INTEGERS')
    g = int(input('g: '))
    p = int(input('p: '))

    # BOBS SECRET!! #
    sb = 12067

    ta = 0
    tb = expo(g, sb, p)

    print('Bob key:', tb)

    # Server socket code:
    #
    # Syntax taken from: https://realpython.com/python-sockets/

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind((HOST, PORT))
        s.listen()
        conn, addr = s.accept()
        with conn:
            while True:
                data = conn.recv(MESSAGE_SIZE)
                # Check for end of connection
                if not data:
                    break
                ta = int.from_bytes(data, byteorder=sys.byteorder)
                print('Recieved ta from Alice:', ta)

                # Send tb to Alice now
                conn.sendall(tb.to_bytes(MESSAGE_SIZE, byteorder=sys.byteorder))

    private_key = expo(ta, sb, p)
    print('Private key generated by Bob:', private_key)

if __name__ == "__main__":
    main()